plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '5.0.13' //
//    id "org.sonarqube" version "6.0.1.5171"
    id "org.sonarqube" version "3.5.0.2730"
//    id "org.sonarqube" version "5.0.0.4638"
}

sourceSets {
    defaultTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/default-test/java')
        }
        resources.srcDir file('src/default-test/resources')
    }
}

configurations {
    defaultTestCompile.extendsFrom testCompile
    defaultTestImplementation.extendsFrom testImplementation
    defaultTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.google.guava:guava:$guavaVersion"



    spotbugs 'com.github.spotbugs:spotbugs:4.7.3'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.7.3'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'


    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.assertj:assertj-core:$assertjVersion"
}

task defaultTest(type: Test) {
    testClassesDirs = sourceSets.defaultTest.output.classesDirs
    classpath = sourceSets.defaultTest.runtimeClasspath
}
test.dependsOn defaultTest

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

defaultTest {
    useJUnitPlatform()
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    executionData tasks.withType(Test)
    reports {
        html.required.set(true)
    }
}

checkstyle {
    'configFile="checkstyle.xml"'
    ignoreFailures = true
}

pmd {
    ruleSetFiles "pmd-rules.xml"
    ruleSets = []
    ignoreFailures = true
}


tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {

        html.required.set(true)
    }
}

tasks.withType(Checkstyle) {
    reports {
        html.outputLocation = rootProject.file('reports/checkstyle/checkstyle.html')
    }
}

task staticAnalysis(type: GradleBuild) {
    tasks = [
        'clean',
        'checkstyleMain',
        'checkstyleTest',
        'checkstyleDefaultTest',
        'pmdMain',
        'pmdTest',
        'pmdDefaultTest',
        'spotbugsMain',
        'spotbugsTest',
        'spotbugsDefaultTest',
    ]
}

mainClassName = 'nl.tudelft.jpacman.Launcher'
